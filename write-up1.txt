Title                                                          
Project 1 – Creating logic gates
Zhongpeng Lin
zlin5@ucsc.edu
Date: 04/24/2011

Purpose:
Create bitwise gates operating on one-bit input widths and use bitwise gates to implement multi-bit gates.

Materials:
The build environment is on a UCSC unix machine using gcc for compilation. Implementation of the project is in C language. The resource materials used were the text book, Computer Organization and Design by D. Patterson and J. Hennessy The core of the project was formed by several implementations of the basic logic gates: NOT, AND, NAND, OR, NOR, XOR, and XNOR. For each of those gates (excepting NOT) there was a set of implementations for 2, 3, 4, 6, and 8 inputs (NOT gates could only take one input). For each of those sets of implementations of n inputs, there were separate implementations for each having 1, 2, 4, 8, 16, and 32 bits per input.

Procedure:
A “bit” was represented as a C char. Bussed inputs (multi-bit-inputs) were represented as an array of char's. The 1-bit width functions all return chars so in order to call functions that deal with 1-bit width inputs (no matter the # of inputs) you must set a variable equal to the function	in order to save the output to a variable. The 2,8,16,32 bit-width functions each take in char arrays of the output(you would like to save to) and the respective number of inputs based upon function call.

The test (gatedriver.c) executable (runGates) tests each of the 1-bit functions, and then each of the 32-bit functions. This ends up testing the entire set of functions, as the 32 bit functions call the 16-bit functions, the 16 call the 8, the 8 call the 4, the 4 call the 2, and the 2 call the 1.

Algorithms:
Because char’s were used to define bits, LOW bit was represented as '0', and a HIGH bit was represented as '1', we are not able to take advantage of C bitwise operators. Instead, we need to use truth table to decide the output of each bitwise function, and let the higher-bit-width gates call the lower-bit-width-gates, all of the gates were implemented in much the same manner, except XNOR functions, which simply returned the opposite value of corresponding XOR's.

Conclusion:
By having the higher-order (bit-width) gate functions call the lower-order gate functions, and by using a char to represent a Bit, all 155 gates were implemented in a very similar and easy-to-implement manner. By being not allowed to use software features such as loops, variable length argument lists, we get a feeling of how hardware actually works. Because of not being able to reuse parts, the implementation of hardware needs to repeat  function units again and again whenever needed. This make the modification of hardware relatively hard: a modification of one part may need to propagate to all occurrence of the same part manually, which is what software engineers try to avoid, by deprecating code clones. 
